#!/usr/bin/env fish

set laptops forge
set power_adapter_forge /sys/class/power_supply/macsmc-ac/online

set servers snowpi

cd ~/nixos

# rebuilds the system.
# this is more complex than usually necessary because the gpu driver for asahi
# is experimental, and i do not want to rebuild the world
function rebuild
    doas echo 'rebuilding authorized'
    nix fmt
    set cmd nix build --print-out-paths .#nixosConfigurations.$hostname.config.system.build.toplevel
    test (uname -r | cut -f2 -d'-') = asahi; and set -a cmd --impure
    set result (eval $cmd); or exit
    doas nix-env -p /nix/var/nix/profiles/system --set $result
    doas $result/bin/switch-to-configuration switch
    set -e __snow_curr_gen_sec
end

function deploy
    nix fmt
    set host $argv[1]
    nixos-rebuild switch --target-host $host --flake .#$host
    or exit
end

function get_curr_gen
    nixos-rebuild list-generations --json | jq -r ".[] | select(.current) | .$argv[1]"
end

function push_config
    set current (get_curr_gen generation)
    git commit -m "generation $hostname-$current"
    git push
end

switch $argv[1]
    case check
        set -qU __snow_curr_gen_sec
        or set -U __snow_curr_gen_sec (date --date=(get_curr_gen date) +'%s')
        set mod_times (stat ./**/*.* -c '%Y %n')
        set newer_files
        set ignore_files ./*.md
        for tn in $mod_times
            set time (echo $tn | cut -f1 -d' ')
            if test $time -gt $__snow_curr_gen_sec
                set filename (echo $tn | cut -f2 -d' ')
                not contains $filename $ignore_files
                and set -a newer_files $filename
            end
        end
        echo $newer_files
        test (count $newer_files) -ne 0; and exit 1
    case search
        echo "this is broken! it prints the name of the derivation output, not the name of the package"
        if test (count $argv) -ne 2
            echo 'provide pkgname to search'
            exit
        end
        nix search nixpkgs $argv[2] --json | jq -r "[.[]] | unique_by(.pname) | .[] | select(.pname | test(\"^$argv[2]\")) | \"\\(.pname): \\(.description)\""
    case update
        if test (contains $hostname $laptops); and test (cat $power_adapter_$hostname) = 0
            read -P 'warn: on battery power. continue? ' response
            test $response = y; or exit
        end

        nix flake update
        test $status -eq 0
        and rebuild
    case deploy
        if test (count $argv) -eq 1
            echo 'must pass at least one host to build and deploy to'
            exit
        end
        for host in $argv[2..]
            if contains $host $servers
                deploy $host
            else
                echo "$host is not a server."
            end
        end
    case rebuild
        rebuild
    case edit
        hx .
        test $status -ne 0; and exit
        git add --all
        rebuild
        test $status -ne 0; and exit
        push_config
    case push
        git add --all
        push_config
    case '*'
        echo 'options: rebuild check edit update deploy search push'
end

exit 0
